package chapter09_setter_getter;
/*
     1, setter /getter의 필요성
     문제 상황
     클래스를 만든다고 가정해보면, 예를 들어 사람 클래스를 만들면서 이름, 나이 등의 정보를 저장하기 위해 필드를 선언합니다

     public class Person

     해당 코드를 확인하면 나이에 -10 대입 못하겠죠
     이상한 값들어갔을때 통제가능하게 하는 방식

     setter getter
     setter : ㄷ[이터를 설정하는 역할의
     method 클래스 외부에서 필드를 직접
     수정하지 못하도록 막고,
      특정 메서드를 통해 값을 전달받아 초기화 및 수정

     getter: 데이터를 조회하는 역할의 클래스 외부에서 필드를 읽지 못하도록 막는다 값 반환 안전히

     3. 장점
     1) 데이터 보호
        변수가 private 접근 제어자을 사용하여 외부에서 직접 접근하지 못하게 함으로써
        데이터를 보호할 수 있음
    2) 데이터의 유효성 검증
        setter 메서드에서 입력된 데이터가 적합한지 확인하고, 잘못된 값을 거부할 수 있음.
        나이가 0보다 큰지 확인
    3) 갭슐화
        데이터를 숨기고 필요한 경우에만 제한적으로 접근할 수 있게 하여 클래스 내부 구현을
        외부에 노출하지 않음
    4)유연성 증가
        나중에 요구 사항이 바뀌어 데이터를 설정하거나 조회하는 방법이 변경되더라도 클래스 내부의 메서드만 수정하면 되므로
        유지 보수가 쉬워짐
    4.언젠나 필수적인가
        일정사이즈 이상의 프로젝트를 진행해서 다수의 데이터를 입력 받을 경우
        적절한 데이터임을 검증하는 과정을 명시하기 위해서 사용하는것이 효과적이다

        interllij에서는 alt와 insert를 지원한다
        lombok 애너테이션을 사용하여 코드 라인 자체를 줄이는 방법
        객체 프로그래밍에서 중요한 기초, 클린코드 작성의 과정
 */
public class Settergetter {
}
